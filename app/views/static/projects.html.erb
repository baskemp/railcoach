<div class="row">
  <div class="column col1-1">
    <div class="spacer">
      <div class="pageHeader">
        <h1>The projects in the <img src="/images/freefoundry.png" alt=".freefoundry" class="freefoundryLogo" /></h1>
      </div>
    </div>
  </div>
</div>
<div id="projects_list" class="row projectUnits commonArticle">
  <div class="column col1-2">
    <div class="spacer block gridSpaced">
      <article>
        <h1>Rail Coach</h1>
        <p>The rail coach project has been started to create the technology behind the .freefoundry platform. Our goal is to provide the members with the tools they need. Next to that we will work on our internet presence and public relations.</p>
        <p>We are THE project that has to deal with the "chicken and the egg" problem. For us to work on the project we need to provide the tools for ourselves as well as for the community. From version control for the source-code to creating communication channels through mailing lists. Everything has to be build up from the ground. Initializing the infrastructure team with sysadmins and creating/maintaining a static website are our first priorities.</p>
        <p>If you wish to join the effort subscribe to the <a href="http://lists.openfoundry.nl/listinfo/railcoach-memo">railcoach mailing list</a></p>
      </article>
    </div>
  </div>
  <div class="column col1-2">
    <div class="spacer block gridSpaced">
      <article>
        <h1>CBAC</h1>
        <p>The CBAC project was created for another projects need for a security system. What was needed was an security system in an abstracted layer from the application. The application was written in Ruby on Rails so a Ruby gem was to logical solution.</p>
        <p>Another problem that the application needed to solve was contextual rights. A lot of the current security systems were based on the role based access control security pattern. The problem with this is that for a system to be abstract and support contextual rights there has to be security code in the system. CBAC tries to solves that problem by supplying contextual rights.</p>
        <p>Currently the <a href="http://cbac.rubyforge.org/">CBAC project</a> is hosted on Rubyforge</p>
      </article>
    </div>
  </div>
  <div class="column col1-2">
    <div class="spacer block gridSpaced">
      <article>
        <h1>Laserharp</h1>
        <p>A Laserharp has beams of light as strings and is played by interrupting these beams. Two main designs exist: the framed laserharp has light-sensors opposite to the light-sources. The frameless laserharp uses other means of detection whether or not a hand is being held in the beam. Searching the Internet you can find spectacular claims, like needing lasers with at least 500 mW to 1 W power. If only to test these claims, we want to create a frameless laserharp. The target of this project is a working prototype, intended to be suitable for domestic environments.</p>
        <p>Currently, we use bright small LEDs and measure the diffuse reflection with photodiodes. An analog circuit balances for background light and it's "decision" goes into a microcontroller that generates MIDI events. Finally, a PC generates the tones with a software synthesizer.</p>
        <!-- FIXME: create laserharp mailing list and insert link below: -->
        <p>We are looking for team members with industrial design skills, the analog circuit needs improvement and other means of detection could be researched. We need to make the light-beams visible, and in the end we'll want a show to demonstrate our laserharp. If you're interested, please subscribe to the laserharp mailing list.</p>
      </article>
    </div>
  </div>
  <div class="column col1-2">
    <div class="spacer block gridSpaced">
      <article>
        <h1>All ePost</h1>
      </article>
    </div>
  </div>
</div>
<script type="text/javascript">
  jQ(document).ready(function () {
    jQ("#projects_list .block:odd").each(function (i) {
      var odd_object, even_object, odd_height, even_height;

      odd_object = jQ("#projects_list .block:odd").get(i);
      odd_height = jQ(odd_object).height();

      even_object = jQ("#projects_list .block:even").get(i);
      even_height = jQ(even_object).height();

      if (odd_height > even_height) {
        even_object = jQ("#projects_list .block:even").get(i);
        jQ(even_object).height(odd_height);
      } else {
        odd_object = jQ("#projects_list .block:odd").get(i);
        jQ(odd_object).height(even_height);
      }
    });
  });
</script>
<div class="break"></div>